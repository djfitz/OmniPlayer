// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import CoreMedia;
@import Foundation;
@import GoogleCast;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MultiVideoPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol PlaybackDevice;
@class UIView;

SWIFT_PROTOCOL("_TtP16MultiVideoPlayer19RemoteMediaPlayback_")
@protocol RemoteMediaPlayback
@property (nonatomic, readonly, copy) NSArray<id <PlaybackDevice>> * _Nonnull remoteDevicesList;
@property (nonatomic, strong) id <PlaybackDevice> _Nullable currentlySelectedDevice;
@property (nonatomic) BOOL isWirelessRouteActive;
/// A button that the client of this lib can put into their
/// view hierarchy. This button automatically handles picking
/// a remote device.
/// When a new remote device is selected via this UI, the client
/// will start receiving messages from the newly selected remote
/// device. Playback may also automatically switch to it as well.
@property (nonatomic, readonly, strong) UIView * _Nullable remoteDevicePickerButton;
@end

enum PlaybackStatus : NSInteger;
@class MediaItem;

SWIFT_CLASS("_TtC16MultiVideoPlayer30AVFoundationMediaPlayerManager")
@interface AVFoundationMediaPlayerManager : NSObject <RemoteMediaPlayback>
/// Setting the offset will perform a seek operation.
@property (nonatomic) enum PlaybackStatus status;
@property (nonatomic) CMTime currentOffset;
@property (nonatomic) CMTime duration;
/// The rate of the playback as a fractional amount. Also known as the playback speed.
/// Can be observed for when rate changes.
/// 0 = stopped, 1 = Default playback rate, 2 = Double speed playback
/// NOTE: Not all media players can support non-whole fractional amounts.
@property (nonatomic) double playbackRate;
@property (nonatomic) BOOL isSeeking;
@property (nonatomic, strong) MediaItem * _Nullable currentMediaItem;
@property (nonatomic, strong) MediaItem * _Nullable loadingMediaItem;
@property (nonatomic, copy) NSArray<id <PlaybackDevice>> * _Nonnull remoteDevicesList;
@property (nonatomic, strong) id <PlaybackDevice> _Nullable currentlySelectedDevice;
@property (nonatomic, strong) UIView * _Nullable remoteDevicePickerButton;
@property (nonatomic) BOOL isWirelessRouteActive;
- (void)airplayRoutesAvailableNotificationWithNotif:(NSNotification * _Nonnull)notif;
- (void)airplayRouteChangedNotificationWithNotif:(NSNotification * _Nonnull)notif;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class NSCoder;

SWIFT_CLASS("_TtC16MultiVideoPlayer12AVPlayerView")
@interface AVPlayerView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class GCKRequest;
@class GCKError;
@class GCKSessionManager;
@class GCKSession;
@class GCKCastSession;
@class GCKDevice;
@class GCKRemoteMediaClient;
@class GCKMediaStatus;
@class GCKMediaMetadata;
@class NSNumber;
@class GCKMediaQueueItem;

/// Manages the interface between the application and the Chromecast SDK.
/// Implements most of the delegate/listeners as defined by the SDK.
SWIFT_CLASS("_TtC16MultiVideoPlayer17ChromecastManager")
@interface ChromecastManager : NSObject <GCKLoggerDelegate, GCKRemoteMediaClientListener, GCKRequestDelegate, GCKSessionManagerListener>
@property (nonatomic) BOOL isWirelessRouteActive;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic) enum PlaybackStatus status;
@property (nonatomic, strong) MediaItem * _Nullable loadingMediaItem;
@property (nonatomic, strong) MediaItem * _Nullable currentMediaItem;
@property (nonatomic) CMTime currentOffset;
@property (nonatomic) CMTime duration;
@property (nonatomic) double playbackRate;
@property (nonatomic) BOOL isSeeking;
- (void)requestDidComplete:(GCKRequest * _Nonnull)request;
- (void)request:(GCKRequest * _Nonnull)request didFailWithError:(GCKError * _Nonnull)error;
- (void)request:(GCKRequest * _Nonnull)request didAbortWithReason:(GCKRequestAbortReason)abortReason;
/// Called when a session is about to be started.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willStartSession:(GCKSession * _Nonnull)session;
/// Called when a session has been successfully started.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartSession:(GCKSession * _Nonnull)session;
/// Called when a session is about to be ended, either by request or due to an error.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willEndSession:(GCKSession * _Nonnull)session;
/// Called when a session has ended, either by request or due to an error.
/// @param sessionManager The session manager.
/// @param session The session.
/// @param error The error, if any; otherwise nil.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndSession:(GCKSession * _Nonnull)session withError:(NSError * _Nullable)error;
/// Called when a Cast session is about to be ended, either by request or due to an error.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willEndCastSession:(GCKCastSession * _Nonnull)session;
/// Called when a session has failed to start.
/// @param sessionManager The session manager.
/// @param session The session.
/// @param error The error.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didFailToStartSession:(GCKSession * _Nonnull)session withError:(NSError * _Nonnull)error;
/// Called when a session has been suspended.
/// @param sessionManager The session manager.
/// @param session The session.
/// @param reason The reason for the suspension.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didSuspendSession:(GCKSession * _Nonnull)session withReason:(GCKConnectionSuspendReason)reason;
/// Called when a session is about to be resumed.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willResumeSession:(GCKSession * _Nonnull)session;
/// Called when a session has been successfully resumed.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeSession:(GCKSession * _Nonnull)session;
/// Called when the device associated with this session has changed in some way (for example, the
/// friendly name has changed).
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param device The updated device object.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager session:(GCKSession * _Nonnull)session didUpdateDevice:(GCKDevice * _Nonnull)device;
/// Called when updated device volume and mute state for a session have been received.
/// @param sessionManager The session manager.
/// @param session The session.
/// @param volume The current volume, in the range [0.0, 1.0].
/// @param muted The current mute state.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager session:(GCKSession * _Nonnull)session didReceiveDeviceVolume:(float)volume muted:(BOOL)muted;
/// Called when updated device status for a session has been received.
/// @param sessionManager The session manager.
/// @param session The session.
/// @param statusText The new device status text.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager session:(GCKSession * _Nonnull)session didReceiveDeviceStatus:(NSString * _Nullable)statusText;
/// Called when the default session options have been changed for a given device category.
/// @param sessionManager The session manager.
/// @param category The device category.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didUpdateDefaultSessionOptionsForDeviceCategory:(NSString * _Nonnull)category;
/// Called when a Cast session is about to be resumed.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willResumeCastSession:(GCKCastSession * _Nonnull)session;
/// Called when a Cast session has been successfully resumed.
/// @param sessionManager The session manager.
/// @param session The Cast session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didResumeCastSession:(GCKCastSession * _Nonnull)session;
/// Called when a Cast session is about to be started.
/// @param sessionManager The session manager.
/// @param session The session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager willStartCastSession:(GCKCastSession * _Nonnull)session;
/// Called when a Cast session has been successfully started.
/// @param sessionManager The session manager.
/// @param session The Cast session.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didStartCastSession:(GCKCastSession * _Nonnull)session;
/// Called when a Cast session has failed to start.
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param error The error.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didFailToStartCastSession:(GCKCastSession * _Nonnull)session withError:(NSError * _Nonnull)error;
/// Called when a Cast session has been suspended.
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param reason The reason for the suspension.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didSuspendCastSession:(GCKCastSession * _Nonnull)session withReason:(GCKConnectionSuspendReason)reason;
/// Called when a Cast session has ended, either by request or due to an error.
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param error The error, if any; otherwise nil.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager didEndCastSession:(GCKCastSession * _Nonnull)session withError:(NSError * _Nullable)error;
/// Called when updated device status for a Cast session has been received.
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param statusText The new device status text.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager castSession:(GCKCastSession * _Nonnull)session didReceiveDeviceStatus:(NSString * _Nullable)statusText;
/// Called when updated device volume and mute state for a Cast session have been received.
/// @param sessionManager The session manager.
/// @param session The Cast session.
/// @param volume The current volume, in the range [0.0, 1.0].
/// @param muted The current mute state.
- (void)sessionManager:(GCKSessionManager * _Nonnull)sessionManager castSession:(GCKCastSession * _Nonnull)session didReceiveDeviceVolume:(float)volume muted:(BOOL)muted;
- (void)logMessage:(NSString * _Nonnull)message atLevel:(GCKLoggerLevel)level fromFunction:(NSString * _Nonnull)function location:(NSString * _Nonnull)location;
/// Called when a new media session has started on the receiver.
/// @param client The client.
/// @param sessionID The ID of the new session.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didStartMediaSessionWithID:(NSInteger)sessionID;
/// Called when updated media status has been received from the receiver.
/// @param client The client.
/// @param mediaStatus The updated media status. The status can also be accessed as a property of
/// the player.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didUpdateMediaStatus:(GCKMediaStatus * _Nullable)mediaStatus;
/// Called when updated media metadata has been received from the receiver.
/// @param client The client.
/// @param mediaMetadata The updated media metadata. The metadata can also be accessed through the
/// GCKRemoteMediaClient::mediaStatus property.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didUpdateMediaMetadata:(GCKMediaMetadata * _Nullable)mediaMetadata;
/// Called when the media preload status has been updated on the receiver.
/// @param client The client.
- (void)remoteMediaClientDidUpdatePreloadStatus:(GCKRemoteMediaClient * _Nonnull)client;
/// Called when the media playback queue has been updated on the receiver.
/// @param client The client.
- (void)remoteMediaClientDidUpdateQueue:(GCKRemoteMediaClient * _Nonnull)client;
/// Called when the list of media queue item IDs has been received.
/// @param client The client.
/// @param queueItemIDs The list of media queue item IDs.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didReceiveQueueItemIDs:(NSArray<NSNumber *> * _Nonnull)queueItemIDs;
/// Called when a contiguous sequence of items has been inserted into the media queue.
/// @param client The client.
/// @param queueItemIDs The item IDs of the inserted items.
/// @param beforeItemID The item ID of the item in front of which the new items have been inserted.
/// If the value is kGCKMediaQueueInvalidItemID, it indicates that the items were appended at the
/// end of the queue.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didInsertQueueItemsWithIDs:(NSArray<NSNumber *> * _Nonnull)queueItemIDs beforeItemWithID:(NSUInteger)beforeItemID;
/// Called when existing items has been updated in the media queue.
/// @param client The client.
/// @param queueItemIDs The item IDs of the updated items.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didUpdateQueueItemsWithIDs:(NSArray<NSNumber *> * _Nonnull)queueItemIDs;
/// Called when a contiguous sequence of items has been removed from the media queue.
/// @param client The client.
/// @param queueItemIDs The item IDs of the removed items.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didRemoveQueueItemsWithIDs:(NSArray<NSNumber *> * _Nonnull)queueItemIDs;
/// Called when detailed information has been received for one or more items in the queue.
/// @param client The client.
/// @param queueItems The queue items.
- (void)remoteMediaClient:(GCKRemoteMediaClient * _Nonnull)client didReceiveQueueItems:(NSArray<GCKMediaQueueItem *> * _Nonnull)queueItems;
@end


@interface GCKMediaInformation (SWIFT_EXTENSION(MultiVideoPlayer))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface GCKMediaMetadata (SWIFT_EXTENSION(MultiVideoPlayer))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface GCKMediaStatus (SWIFT_EXTENSION(MultiVideoPlayer))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class NSBundle;

SWIFT_CLASS("_TtC16MultiVideoPlayer27MediaControlsViewController")
@interface MediaControlsViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (IBAction)toggleFullscreen:(id _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC16MultiVideoPlayer9MediaItem")
@interface MediaItem : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A generic interface for a playback queue
SWIFT_PROTOCOL("_TtP16MultiVideoPlayer18MediaPlaybackQueue_")
@protocol MediaPlaybackQueue
/// Which item in the playback queue is
/// currently playing.
/// When queue is empty, this property will return nil.
@property (nonatomic) int32_t currentPlaybackQueueIndex;
/// An ordered list of media items
@property (nonatomic, copy) NSArray<MediaItem *> * _Nonnull playlist;
- (void)addItemAt:(NSInteger)Index;
- (void)addToEndWithMediaItems:(NSArray<MediaItem *> * _Nonnull)mediaItems;
- (void)removeLast;
- (void)removeFirst;
- (void)removeItemAt:(NSInteger)Index;
- (void)next;
- (void)previous;
- (void)skipToMediaItemAt:(NSInteger)index;
@end


SWIFT_CLASS("_TtC16MultiVideoPlayer18MediaPlayerManager")
@interface MediaPlayerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_CLASS("_TtC16MultiVideoPlayer17MediaUIController")
@interface MediaUIController : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP16MultiVideoPlayer14PlaybackDevice_")
@protocol PlaybackDevice
@property (nonatomic, readonly) NSInteger isLocal;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

typedef SWIFT_ENUM(NSInteger, PlaybackStatus, closed) {
  PlaybackStatusUnknown = 0,
  PlaybackStatusLoading = 1,
  PlaybackStatusReadyToPlay = 2,
  PlaybackStatusPlaying = 3,
  PlaybackStatusPaused = 4,
  PlaybackStatusBuffering = 5,
  PlaybackStatusIdle = 6,
  PlaybackStatusPlayedToEnd = 7,
  PlaybackStatusFailed = 8,
};


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
